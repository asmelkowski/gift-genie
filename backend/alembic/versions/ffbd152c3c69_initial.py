"""initial

Revision ID: ffbd152c3c69
Revises: 
Create Date: 2025-10-08 21:41:43.956579

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision: str = 'ffbd152c3c69'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_users_email_lower', 'users', [sa.literal_column('lower(email)')], unique=True)
    op.create_table('groups',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('admin_user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('historical_exclusions_enabled', sa.Boolean(), nullable=False),
    sa.Column('historical_exclusions_lookback', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_groups_admin_user_id', 'groups', ['admin_user_id'], unique=False)
    op.create_table('draws',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'FINALIZED', name='draw_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('finalized_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notification_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_draws_group_id', 'draws', ['group_id'], unique=False)
    op.create_index('idx_draws_group_status', 'draws', ['group_id', 'status'], unique=False)
    op.create_table('members',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_members_group_active', 'members', ['group_id'], unique=False, postgresql_where=sa.text('is_active = true'))
    op.create_index('idx_members_group_email_lower', 'members', ['group_id', sa.literal_column('lower(email)')], unique=False, postgresql_where=sa.text('email IS NOT NULL'))
    op.create_index('idx_members_group_id', 'members', ['group_id'], unique=False)
    op.create_table('assignments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('draw_id', sa.UUID(), nullable=False),
    sa.Column('giver_member_id', sa.UUID(), nullable=False),
    sa.Column('receiver_member_id', sa.UUID(), nullable=False),
    sa.Column('encrypted_receiver_id', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('giver_member_id != receiver_member_id', name='ck_no_self_assignment'),
    sa.ForeignKeyConstraint(['draw_id'], ['draws.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['giver_member_id'], ['members.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['receiver_member_id'], ['members.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('draw_id', 'giver_member_id', name='uq_draw_giver')
    )
    op.create_index('idx_assignments_draw_id', 'assignments', ['draw_id'], unique=False)
    op.create_index('idx_assignments_giver_member_id', 'assignments', ['giver_member_id'], unique=False)
    op.create_index('idx_assignments_receiver_member_id', 'assignments', ['receiver_member_id'], unique=False)
    op.create_table('exclusions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.UUID(), nullable=False),
    sa.Column('giver_member_id', sa.UUID(), nullable=False),
    sa.Column('receiver_member_id', sa.UUID(), nullable=False),
    sa.Column('exclusion_type', postgresql.ENUM('MANUAL', 'HISTORICAL', name='exclusion_type_enum'), nullable=False),
    sa.Column('is_mutual', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['giver_member_id'], ['members.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['receiver_member_id'], ['members.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_exclusions_created_by_user_id', 'exclusions', ['created_by_user_id'], unique=False)
    op.create_index('idx_exclusions_giver_member_id', 'exclusions', ['giver_member_id'], unique=False)
    op.create_index('idx_exclusions_group_id', 'exclusions', ['group_id'], unique=False)
    op.create_index('idx_exclusions_receiver_member_id', 'exclusions', ['receiver_member_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_exclusions_receiver_member_id', table_name='exclusions')
    op.drop_index('idx_exclusions_group_id', table_name='exclusions')
    op.drop_index('idx_exclusions_giver_member_id', table_name='exclusions')
    op.drop_index('idx_exclusions_created_by_user_id', table_name='exclusions')
    op.drop_table('exclusions')
    op.drop_index('idx_assignments_receiver_member_id', table_name='assignments')
    op.drop_index('idx_assignments_giver_member_id', table_name='assignments')
    op.drop_index('idx_assignments_draw_id', table_name='assignments')
    op.drop_table('assignments')
    op.drop_index('idx_members_group_id', table_name='members')
    op.drop_index('idx_members_group_email_lower', table_name='members', postgresql_where=sa.text('email IS NOT NULL'))
    op.drop_index('idx_members_group_active', table_name='members', postgresql_where=sa.text('is_active = true'))
    op.drop_table('members')
    op.drop_index('idx_draws_group_status', table_name='draws')
    op.drop_index('idx_draws_group_id', table_name='draws')
    op.drop_table('draws')
    op.drop_index('idx_groups_admin_user_id', table_name='groups')
    op.drop_table('groups')
    op.drop_index('idx_users_email_lower', table_name='users')
    op.drop_table('users')
    # Drop enum types after tables are gone
    op.execute("DROP TYPE IF EXISTS exclusion_type_enum")
    op.execute("DROP TYPE IF EXISTS draw_status_enum")
    # ### end Alembic commands ###
