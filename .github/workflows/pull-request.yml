name: Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v7

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: Lint backend (ruff)
        working-directory: ./backend
        run: uv run ruff check src/

      - name: Type check backend (mypy)
        working-directory: ./backend
        run: uv run mypy src/

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Lint frontend (ESLint)
        working-directory: ./frontend
        run: bun run lint

      - name: Minimize uv cache
        run: uv cache prune --ci

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gift_genie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v7

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: Run backend tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/gift_genie_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
        run: uv run pytest --cov=gift_genie --cov-report=xml --cov-report=term

      - name: Upload backend coverage to artifacts
        uses: actions/upload-artifact@v5
        with:
          name: backend-coverage
          path: backend/coverage.xml

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Run frontend unit tests with coverage
        working-directory: ./frontend
        run: bun run test:coverage

      - name: Upload frontend coverage to artifacts
        uses: actions/upload-artifact@v5
        with:
          name: frontend-unit-coverage
          path: frontend/coverage/coverage-final.json

      - name: Minimize uv cache
        run: uv cache prune --ci

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gift_genie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Check out repository
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v7

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Install backend dependencies
        working-directory: ./backend
        run: uv sync

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/gift_genie_test
        run: uv run alembic upgrade head

      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/gift_genie_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
        run: |
          uv run uvicorn src.gift_genie.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
          curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8000/api/v1/health || true

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: bunx playwright install --with-deps chromium

      - name: Run E2E tests
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: http://localhost:8000/api/v1
        run: bun run e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

      - name: Upload E2E coverage to artifacts
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: frontend-e2e-coverage
          path: frontend/coverage/
          retention-days: 7

      - name: Minimize uv cache
        run: uv cache prune --ci

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always()
    permissions:
      pull-requests: write
    
    steps:
      - name: Check job statuses
        id: check_status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.unit-test.result }}" == "success" && "${{ needs.e2e-test.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All checks passed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some checks failed. Please review the details below:" >> $GITHUB_OUTPUT
          fi

      - name: Download backend coverage
        if: needs.unit-test.result == 'success'
        uses: actions/download-artifact@v6
        with:
          name: backend-coverage
        continue-on-error: true

      - name: Download frontend unit coverage
        if: needs.unit-test.result == 'success'
        uses: actions/download-artifact@v6
        with:
          name: frontend-unit-coverage
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintStatus = '${{ needs.lint.result }}';
            const unitTestStatus = '${{ needs.unit-test.result }}';
            const e2eTestStatus = '${{ needs.e2e-test.result }}';
            const overallStatus = '${{ steps.check_status.outputs.status }}';
            const message = '${{ steps.check_status.outputs.message }}';

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '🚫';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };

            const body = `## ${message}

            ### Job Results
            | Job | Status |
            |-----|--------|
            | Lint | ${statusEmoji(lintStatus)} ${lintStatus} |
            | Unit Tests | ${statusEmoji(unitTestStatus)} ${unitTestStatus} |
            | E2E Tests | ${statusEmoji(e2eTestStatus)} ${e2eTestStatus} |

            ### Details
            - **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Commit**: ${{ github.event.pull_request.head.sha }}
            - **Branch**: ${{ github.head_ref }}

            ${overallStatus === 'success' ? '🎉 This PR is ready for review!' : '⚠️ Please fix the failing checks before merging.'}
            `;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Job Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
